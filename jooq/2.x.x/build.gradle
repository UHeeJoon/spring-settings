plugins {
    id 'nu.studer.jooq' version '5.2.2'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

project.ext {
    jooqVersion = dependencyManagement.importedProperties['jooq.version']
    mysqlVersion = dependencyManagement.importedProperties['mysql.version']
}

dependencies {
    // Jooq
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqGenerator "mysql:mysql-connector-java:${project.mysqlVersion}"
}

//// Jooq 설정부
def generatedJooq = 'src/main/generated-jooq'

jooq {
    version = project.jooqVersion

    configurations {
        main {  // name of the jOOQ configuration
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN

                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = {{url}}
                    user = {{user}}
                    password = {{password}}
                }

                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase' // <- mysql
                        inputSchema = {{schemaName}}
                        includes = '.*'
                        excludes = ''
                        forcedTypes { // enum 등록
                            forcedType {
                                userType = 'com.example.enumclass.path'
                                enumConverter = true
                                includeExpression = '.*\\.enumType' // regex
                                includeTypes = '.*'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = {{packageName}}
                        directory = generatedJooq
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

// incremental build (증분 빌드) - Jooq 오브젝트 생성 퍼포먼스 향상
tasks.named('generateJooq').configure {
    allInputsDeclared = true
    outputs.cacheIf { true }
}

// java source set 에 Jooq 디렉토리 추가
sourceSets {
    main.java.srcDir generatedJooq
}

// gradle clean 시에 Jooq 디렉토리 삭제 (본래의 Jooq 의도에는 맞지 않는 사용법)
// tasks.named('clean') {
//     dependsOn 'cleanGenerateJooq'
// }